require('dotenv').config();
const { createBot, createProvider, createFlow, addKeyword, EVENTS } = require('@bot-whatsapp/bot');
const BaileysProvider = require('@bot-whatsapp/provider/baileys');
const MockAdapter = require('@bot-whatsapp/database/mock');
// const MongoAdapter = require('@bot-whatsapp/database/mongo');


// Variables para manejar el estado del usuario y el temporizador
let timeoutId;
let botInstance;
let currentChatId;
let hasAskedIfInterested = false; // Variable para rastrear si se ha enviado el mensaje de seguimiento

const TIMEOUT_DURATION = 1500 * 60 * 1000; // 15 minutos
const AUTO_RESPONSE_INTERVAL = 3000; // 3 segundos

// Mensajes aleatorios para responder
const randomResponses = [
    '¬°Qu√© bueno saber de ti!',
    '¬øHay algo m√°s en lo que pueda ayudarte?',
    'Recuerda que tenemos ofertas especiales este mes.',
    '¬°No olvides seguirnos en nuestras redes sociales!',
    '¬øTienes alguna otra pregunta?',
];

// Funci√≥n para obtener una respuesta aleatoria
const getRandomResponse = () => randomResponses[Math.floor(Math.random() * randomResponses.length)];

// Funci√≥n para preguntar al usuario si todav√≠a est√° interesado en los productos
const askIfInterested = async () => {
    if (!botInstance || !currentChatId || hasAskedIfInterested) return;

    try {
        await botInstance.sendMessage(currentChatId, '¬øTodav√≠a est√°s interesado en nuestros productos?');
        hasAskedIfInterested = true; // Marcar como enviado
    } catch (error) {
        console.error('Error al preguntar si el usuario est√° interesado:', error.message);
    }
};

// Funci√≥n para iniciar un temporizador de 15 minutos
const startTimeout = () => {
    clearTimeout(timeoutId); // Limpiar cualquier temporizador existente
    timeoutId = setTimeout(askIfInterested, TIMEOUT_DURATION);
};

// Funci√≥n para normalizar el texto ingresado por el usuario (convertir a min√∫sculas)
const normalizeInput = (input) => input.toLowerCase().trim();

// Funci√≥n para manejar mensajes entrantes
const handleIncomingMessage = async (message) => {
    try {
        console.log('Mensaje entrante:', message);
        currentChatId = message.from;

        // Reiniciar el temporizador y resetear el estado de seguimiento de inter√©s
        startTimeout();
        hasAskedIfInterested = false;
    } catch (error) {
        console.error('Error al manejar el mensaje entrante:', error.message);
    }
};

// Flujo de bienvenida con men√∫
const flowWelcome = addKeyword([EVENTS.WELCOME])
    .addAnswer('üôå ¬°Hola! ¬°Bienvenido al Super Tianguis del centro!')
    .addAnswer([
        '¬øEn qu√© puedo ayudarte hoy?',
        '1. Conocer el horario de atenci√≥n',
        '2. Ubicaci√≥n de la tienda',
        '3. Otras consultas'
    ])
    .addAnswer('Por favor, responde con el n√∫mero de la opci√≥n que deseas.');

// Flujo para informar sobre el horario de atenci√≥n
const flowHorario = addKeyword(['1', 'horario', 'abren', 'cierran', 'hora', 'horarios', 'apertura', 'cierre', 'tiempo'].map(normalizeInput))
    .addAnswer('¬°Con gusto te dar√© esa informaci√≥n!')
    .addAnswer([
        'Nuestro horario es de: Lunes a S√°bado de 10:00 am a 8:00 pm',
        'Domingo de 10:00 am a 4:00 pm.',
        '¬°Estamos listos para recibirte y ofrecerte la mejor calidad de ropa a los mejores precios!',
        '¬øHay algo m√°s en lo que pueda ayudarte? ¬°Estoy aqu√≠ para asistirte!',
    ]);

// Flujo para informar sobre la ubicaci√≥n
const flowUbicacion = addKeyword(['2', 'donde', 'ubicados', 'ubicaci√≥n', 'parte', 'direccion', 'direcci√≥n', 'localizacion', 'localizaci√≥n', 'ubican', 'ubicacion'].map(normalizeInput))
    .addAnswer([
        'Nos encontramos en Progreso #104, zona centro.',
        'Estamos ubicados en una zona c√©ntrica para tu conveniencia.',
        '¬°Te esperamos para que puedas disfrutar de nuestra selecci√≥n de ropa de alta calidad a precios accesibles!',
        '¬øHay algo m√°s en lo que pueda asistirte? ¬°Estoy aqu√≠ para ayudarte!',
    ])
    .addAnswer('https://maps.app.goo.gl/k8BuD8qisC7PPUhK7?g_st=com.google.maps.preview.copy');

// Flujo para otras consultas
const flowOtrasConsultas = addKeyword(['3', 'otros', 'otras', 'otra', 'otro', 'consulta', 'consultas', 'pregunta', 'preguntas'].map(normalizeInput))
    .addAnswer('Enseguida una persona te responder√° sobre tu consulta.')
    // .addAction(async (ctx, bot) => {
    //     const adminChatId = 'ADMIN_CHAT_ID'; // Reemplaza con el ID de chat del administrador
    //     await bot.sendMessage(adminChatId, Consulta de otras consultas: ${ctx.body});
    // })
    .addAnswer('¬øHay algo m√°s en lo que pueda asistirte?');

    const flowGratitude = addKeyword(['ok', 'gracias', 'bueno', 'bien', 'perfecto', 'genial', 'fant√°stico', 'excelente', 'acuerdo'].map(normalizeInput))
    .addAnswer([
        '¬°Es un gusto ayudarte! üòä',
        'Si necesitas algo m√°s, escribe "men√∫" para ver las opciones disponibles.'
    ])

// Funci√≥n principal para iniciar el bot
const main = async () => {
    try {
        // const adapterDB = new MongoAdapter({
        //     dbUri: process.env.MONGO_DB_URI,
        //     dbName: "Bot"
        // });
        const adapterDB = new MockAdapter();
        const adapterFlow = createFlow([flowWelcome, flowHorario, flowUbicacion, flowOtrasConsultas, flowGratitude]);
        const adapterProvider = createProvider(BaileysProvider);

        botInstance = createBot({
            flow: adapterFlow,
            provider: adapterProvider,
            database: adapterDB,
            onMessage: handleIncomingMessage
        });

        startTimeout();

        // Configurar respuesta autom√°tica cada 3 segundos
        setInterval(async () => {
            if (currentChatId) {
                const randomResponse = getRandomResponse();
                await botInstance.sendMessage(currentChatId, randomResponse);
            }
        }, AUTO_RESPONSE_INTERVAL);

    } catch (error) {
        console.error('Error al iniciar el bot:', error);
    }
};

// Ejecutar la funci√≥n principal y manejar errores globales
main().catch((error) => {
    console.error('Error en la ejecuci√≥n principal:', error);
});
